# TODO Clean up names

on: 
  push:
  pull_request:

jobs:
  macos_x86_64:
    strategy:
      matrix:
        os: [macos-latest]
        arch: [x86_64]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Build
        run: |
          mkdir build
          mkdir deploy
          cd build
          cmake ..
          make
          cd ..
          cp build/mac/tests/openpnp-capture-test deploy/openpnp-capture-test-${{ matrix.os }}-${{ matrix.arch }}
          cp build/libopenpnp-capture.dylib deploy/libopenpnp-capture-${{ matrix.os }}-${{ matrix.arch }}.dylib

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with: 
          path: |
            deploy/*
            
      - name: Create Release
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
        uses: ncipollo/release-action@v1
        with:
            artifacts: "deploy/*"
            token: ${{ secrets.GITHUB_TOKEN }}
            allowUpdates: true

  macos_aarch64: 
    strategy:
      matrix:
        os: [macos-latest]
        arch: [aarch64]

    # Currently runs on Jason's Mac using a Github self hosted runner because Github doesn't
    # yet support runners for Apple Silicon on macOS. 
    runs-on: [self-hosted, macOS, ARM64]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Build
        run: |
          mkdir build
          mkdir deploy
          cd build
          cmake ..
          make
          cd ..
          cp build/mac/tests/openpnp-capture-test deploy/openpnp-capture-test-${{ matrix.os }}-${{ matrix.arch }}
          cp build/libopenpnp-capture.dylib deploy/libopenpnp-capture-${{ matrix.os }}-${{ matrix.arch }}.dylib

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with: 
          path: |
            deploy/*
            
      - name: Create Release
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
        uses: ncipollo/release-action@v1
        with:
            artifacts: "deploy/*"
            token: ${{ secrets.GITHUB_TOKEN }}
            allowUpdates: true

  windows_x86_64: 
    strategy:
      matrix:
        os: [windows-latest]
        arch: [x86_64]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Build
        run: |
          mkdir build
          mkdir deploy
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release cmake -G "Unix Makefiles" ..
          make
          cd ..
          cp build/win/tests/openpnp-capture-test.exe deploy/openpnp-capture-test-${{ matrix.os }}-${{ matrix.arch }}.exe
          cp build/libopenpnp-capture.dll deploy/libopenpnp-capture-${{ matrix.os }}-${{ matrix.arch }}.dll

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with: 
          path: |
            deploy/*
            
      - name: Create Release
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
        uses: ncipollo/release-action@v1
        with:
            artifacts: "deploy/*"
            token: ${{ secrets.GITHUB_TOKEN }}
            allowUpdates: true

  # Hm, I could do this self hosted in Docker...
  linux_aarch64:
    strategy:
      matrix:
        os: [ubuntu-latest]
        arch: [aarch64]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup directories
        run: |
          mkdir build
          mkdir deploy

      - name: Build
        uses: uraimo/run-on-arch-action@v2.0.10
        with:
          arch: aarch64 # No dockerfile for x86_64 on https://github.com/uraimo/run-on-arch-action/tree/master/Dockerfiles
          distro: ubuntu20.04 # Different from matrix.os on GHA: https://github.com/marketplace/actions/run-on-architecture#supported-platforms
          dockerRunArgs: |
            --volume "${PWD}/build:/build"
            --volume "${PWD}/deploy:/deploy"

          run: |
                 apt-get update -y && apt-get install -y cmake make nasm libgtk-3-dev build-essential # install same packages as above within the cross-compiling container
                 cd build && cmake .. && make && cd ..
                 cp /build/linux/tests/openpnp-capture-test /deploy/openpnp-capture-test-${{ matrix.os }}-${{ matrix.arch }}
                 cp /build/libopenpnp-capture.so /deploy/libopenpnp-capture-${{ matrix.os }}-${{ matrix.arch }}.so

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with: 
          path: |
            deploy/*


  linux_x86_64: 
    strategy:
      matrix:
        os: [ubuntu-latest]
        arch: [x86_64]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: "Build"
        run: |
          sudo apt-get update -y && sudo apt-get install -y nasm libgtk-3-dev
          mkdir build
          mkdir deploy
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release cmake ..
          make
          cd ..
          cp build/linux/tests/openpnp-capture-test deploy/openpnp-capture-test-${{ matrix.os }}-${{ matrix.arch }}
          cp build/libopenpnp-capture.so deploy/libopenpnp-capture-${{ matrix.os }}-${{ matrix.arch }}.so
        if: matrix.os == 'ubuntu-latest'

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with: 
          path: |
            deploy/*



